# 파일 이름: .github/workflows/deploy.yml

name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # 1. Google Cloud에 로그인하기 위한 권한 설정
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # 2. GitHub 저장소의 코드를 가져옴
      - name: Checkout
        uses: actions/checkout@v4

      # 3. Google Cloud에 로그인 (우리가 만든 '비밀 통로' 사용)
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      # 4. gcloud 명령어 사용 준비
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 5. 이미지 빌드 및 푸시 (우리가 터미널에서 쳤던 gcloud builds submit)
      - name: Build and Push Docker image
        run: |-
          gcloud builds submit --tag us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-spring-repo/gemini-discord-bot

      # 6. Cloud Run에 배포 (우리가 터미널에서 쳤던 gcloud run deploy)
      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy gemini-discord-bot \
            --image="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-spring-repo/gemini-discord-bot" \
            --region="us-central1" \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},MONGODB_URI=${{ secrets.MONGODB_URI }},FLOWISE_ENDPOINT=${{ secrets.FLOWISE_ENDPOINT }},FLOWISE_API_KEY=${{ secrets.FLOWISE_API_KEY }},DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }},DISCORD_GUILD_ID=${{ secrets.DISCORD_GUILD_ID }},EQK_API_KEY=${{ secrets.EQK_AUTH_KEY }},GOOGLE_SEARCH_API=${{ secrets.GOOGLE_SEARCH_API }},GOOGLE_SEARCH_ENGINE_ID=${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}" \
            --allow-unauthenticated
